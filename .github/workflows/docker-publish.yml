name: Docker Publish CI/CD

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ] # 当代码推送到 main 分支时触发
    # 可选: 如果你想在推送 tag 时也发布带版本号的镜像
    # tags:
    #   - 'v*.*.*'
  # 可选: 允许手动触发
  workflow_dispatch:

env:
  # 设置镜像仓库和镜像名称 (使用 GitHub Container Registry - ghcr.io)
  # 将 YOUR_GITHUB_USERNAME 替换为你的 GitHub 用户名或组织名
  # 将 YOUR_REPO_NAME 替换为你的仓库名称 (通常会自动推断)
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }} # 格式: USERNAME/REPONAME

jobs:
  build-and-push:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu Runner

    # 设置 GITHUB_TOKEN 的权限，允许推送到 GitHub Packages (GHCR)
    permissions:
      contents: read # 需要读取仓库内容
      packages: write # 需要写入 GitHub Packages (推送镜像)

    steps:
      - name: Checkout repository # 步骤1: 检出代码
        uses: actions/checkout@v4 # 使用官方的 checkout action

      - name: Set up Docker Buildx # 步骤2: 设置 Buildx 以便构建 Docker 镜像
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry # 步骤3: 登录到镜像仓库 (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # 使用触发工作流的用户作为用户名
          password: ${{ secrets.GITHUB_TOKEN }} # 使用自动生成的 GITHUB_TOKEN 作为密码/令牌

      - name: Extract metadata (tags, labels) for Docker # 步骤4: 提取元数据用于 Docker 镜像标签
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # 为 main 分支推送 latest 标签
            type=raw,value=latest,enable={{is_default_branch}}
            # 为每个 commit SHA 推送一个唯一的标签
            type=sha,prefix=,suffix=,format=short
            # 如果推送的是 Git tag (例如 v1.2.3)，则使用该 tag 作为 Docker 镜像标签
            type=ref,event=tag

      - name: Build and push Docker image # 步骤5: 构建并推送 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: . # Docker 构建上下文 (项目根目录)
          file: ./Dockerfile # 指定 Dockerfile 文件路径
          push: true # 构建后立即推送
          tags: ${{ steps.meta.outputs.tags }} # 使用上一步生成的标签
          labels: ${{ steps.meta.outputs.labels }} # 使用上一步生成的标签
          cache-from: type=gha # 尝试从 GitHub Actions 缓存加载层
          cache-to: type=gha,mode=max # 将构建缓存保存到 GitHub Actions 缓存